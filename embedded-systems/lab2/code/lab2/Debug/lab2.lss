
lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000170  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000170  00000204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800062  00800062  00000206  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000090  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000964  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000080  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000016f  00000000  00000000  00000a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000bd  00000000  00000000  00000b73  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000001ce  00000000  00000000  00000c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000050  00000000  00000000  00000e00  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000000cb  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000001e  00000000  00000000  00000f1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e7       	ldi	r30, 0x70	; 112
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 99 00 	call	0x132	; 0x132 <main>
  8a:	0c 94 b6 00 	jmp	0x16c	; 0x16c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_1>:
uint8_t timeCounterLimit = 61;
uint8_t digit = 0;

uint8_t digitValues[10];

ISR(INT0_vect){
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	6f 93       	push	r22
  a0:	7f 93       	push	r23
  a2:	8f 93       	push	r24
  a4:	9f 93       	push	r25
	timeCounter --; // decrease time counter
  a6:	80 91 62 00 	lds	r24, 0x0062
  aa:	81 50       	subi	r24, 0x01	; 1
  ac:	80 93 62 00 	sts	0x0062, r24

	if (timeCounterLimit != 0){
  b0:	20 91 60 00 	lds	r18, 0x0060
  b4:	22 23       	and	r18, r18
  b6:	51 f0       	breq	.+20     	; 0xcc <__vector_1+0x3a>
		digit ++; //increase second digit
  b8:	80 91 63 00 	lds	r24, 0x0063
  bc:	8f 5f       	subi	r24, 0xFF	; 255
		digit = digit % 10; // reset digit if it reach 10
  be:	6a e0       	ldi	r22, 0x0A	; 10
  c0:	0e 94 aa 00 	call	0x154	; 0x154 <__udivmodqi4>
  c4:	90 93 63 00 	sts	0x0063, r25
		timeCounter = timeCounterLimit; // reset time counter
  c8:	20 93 62 00 	sts	0x0062, r18
	}
}
  cc:	9f 91       	pop	r25
  ce:	8f 91       	pop	r24
  d0:	7f 91       	pop	r23
  d2:	6f 91       	pop	r22
  d4:	2f 91       	pop	r18
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <init>:
	}
 
}

void init(void){
	digitValues[0] = 0x3f;
  e0:	8f e3       	ldi	r24, 0x3F	; 63
  e2:	80 93 64 00 	sts	0x0064, r24
	digitValues[1] = 0x06;
  e6:	86 e0       	ldi	r24, 0x06	; 6
  e8:	80 93 65 00 	sts	0x0065, r24
	digitValues[2] = 0x5b;
  ec:	8b e5       	ldi	r24, 0x5B	; 91
  ee:	80 93 66 00 	sts	0x0066, r24
	digitValues[3] = 0x4f;
  f2:	8f e4       	ldi	r24, 0x4F	; 79
  f4:	80 93 67 00 	sts	0x0067, r24
	digitValues[4] = 0x66;
  f8:	86 e6       	ldi	r24, 0x66	; 102
  fa:	80 93 68 00 	sts	0x0068, r24
	digitValues[5] = 0x6d;
  fe:	8d e6       	ldi	r24, 0x6D	; 109
 100:	80 93 69 00 	sts	0x0069, r24
	digitValues[6] = 0x7d;
 104:	8d e7       	ldi	r24, 0x7D	; 125
 106:	80 93 6a 00 	sts	0x006A, r24
	digitValues[7] = 0x07;
 10a:	87 e0       	ldi	r24, 0x07	; 7
 10c:	80 93 6b 00 	sts	0x006B, r24
	digitValues[8] = 0x7f;
 110:	8f e7       	ldi	r24, 0x7F	; 127
 112:	80 93 6c 00 	sts	0x006C, r24
	digitValues[9] = 0x6f;
 116:	8f e6       	ldi	r24, 0x6F	; 111
 118:	80 93 6d 00 	sts	0x006D, r24
	
}
 11c:	08 95       	ret

0000011e <showDigit>:
void showDigit(void){
	uint8_t dataValue = digitValues[digit];
 11e:	80 91 63 00 	lds	r24, 0x0063
 122:	e4 e6       	ldi	r30, 0x64	; 100
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	e8 0f       	add	r30, r24
 128:	f1 1d       	adc	r31, r1

	PORTA = 0x80 | dataValue;
 12a:	80 81       	ld	r24, Z
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8b bb       	out	0x1b, r24	; 27
}
 130:	08 95       	ret

00000132 <main>:
		timeCounter = timeCounterLimit; // reset time counter
	}
}

int main(void){
	TCCR0 |= 0x03; // set prescaler value to 64
 132:	83 b7       	in	r24, 0x33	; 51
 134:	83 60       	ori	r24, 0x03	; 3
 136:	83 bf       	out	0x33, r24	; 51
	// by default timer is reset after overflow
	TIMSK = 0x01; // set interrupts from overflow (T0IE0=1)	
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	89 bf       	out	0x39, r24	; 57
	timeCounter = timeCounterLimit;
 13c:	80 91 60 00 	lds	r24, 0x0060
 140:	80 93 62 00 	sts	0x0062, r24
	
	sei();
 144:	78 94       	sei

	//use PORT A to control display
	DDRA = 0xFF; // configure PORT A as output
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	8a bb       	out	0x1a, r24	; 26
	init();
 14a:	0e 94 70 00 	call	0xe0	; 0xe0 <init>
	showDigit();
 14e:	0e 94 8f 00 	call	0x11e	; 0x11e <showDigit>
 152:	ff cf       	rjmp	.-2      	; 0x152 <main+0x20>

00000154 <__udivmodqi4>:
 154:	99 1b       	sub	r25, r25
 156:	79 e0       	ldi	r23, 0x09	; 9
 158:	04 c0       	rjmp	.+8      	; 0x162 <__udivmodqi4_ep>

0000015a <__udivmodqi4_loop>:
 15a:	99 1f       	adc	r25, r25
 15c:	96 17       	cp	r25, r22
 15e:	08 f0       	brcs	.+2      	; 0x162 <__udivmodqi4_ep>
 160:	96 1b       	sub	r25, r22

00000162 <__udivmodqi4_ep>:
 162:	88 1f       	adc	r24, r24
 164:	7a 95       	dec	r23
 166:	c9 f7       	brne	.-14     	; 0x15a <__udivmodqi4_loop>
 168:	80 95       	com	r24
 16a:	08 95       	ret

0000016c <_exit>:
 16c:	f8 94       	cli

0000016e <__stop_program>:
 16e:	ff cf       	rjmp	.-2      	; 0x16e <__stop_program>
